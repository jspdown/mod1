var SKULPTCPU=SKULPTCPU||{version:"1.0.0"};console.log("Using SKULPTCPU "+SKULPTCPU.version);SKULPTCPU.SkulptLayer=function(a){this.__skulptMesh=a;this.data=[];this.__simplex=void 0;this.__init()};SKULPTCPU.SkulptLayer.prototype.__init=function(){this.clear()};
SKULPTCPU.SkulptLayer.prototype.loadFromImageData=function(a,b,e){var h=this.__skulptMesh.__mesh.geometry.vertices,g,f=99999,d,c;d=0;for(c=h.length;d<c;d++)g=e?Math.abs(a[4*d]/255-0.5):a[4*d]/255,this.data[d]=g*b,this.data[d]<f&&(f=this.data[d]);d=0;for(c=h.length;d<c;d++)this.data[d]-=f;this.__skulptMesh.updateAll()};
SKULPTCPU.SkulptLayer.prototype.addNoise=function(a,b,e,h,g,f,d){a=a||1;b=b||1;e=e||1;h=h||1;g=g||0;f=f||0;d=d||0;this.__simplex||(this.__simplex=new SimplexNoise);var c=this.__skulptMesh.__mesh.geometry.vertices,k,l,m,n=99999;k=0;for(l=c.length;k<l;k++)m=c[k],this.data[k]=(this.__simplex.noise3d(b*m.x+g,e*m.y+f,h*m.z+d)/2+0.5)*a,this.data[k]<n&&(n=this.data[k]);k=0;for(l=c.length;k<l;k++)this.data[k]-=n;this.__skulptMesh.updateAll()};
SKULPTCPU.SkulptLayer.prototype.clear=function(){var a,b;a=0;for(b=this.__skulptMesh.__mesh.geometry.vertices.length;a<b;a++)this.data[a]=0};SKULPTCPU.SkulptMesh=function(a){this.__mesh=a;this.__layers={};this.__currLayer=void 0;this.__displacements=[];this.__worldMatInv=new THREE.Matrix4;this.__localPos=new THREE.Vector3;this.__init()};SKULPTCPU.SkulptMesh.prototype.__init=function(){var a,b;a=0;for(b=this.__mesh.geometry.vertices.length;a<b;a++)this.__displacements[a]=0};
SKULPTCPU.SkulptMesh.prototype.addLayer=function(a){if(-1!==Object.keys(this.__layers).indexOf(a))throw Error("Layer name already exists: "+a);this.__layers[a]=new SKULPTCPU.SkulptLayer(this);this.__currLayer=this.__layers[a];return this.__layers[a]};SKULPTCPU.SkulptMesh.prototype.removeLayer=function(a){};SKULPTCPU.SkulptMesh.prototype.getCurrLayer=function(){return this.__currLayer};SKULPTCPU.SkulptMesh.prototype.setCurrLayer=function(){};
SKULPTCPU.SkulptMesh.prototype.clearCurrLayer=function(){this.__currLayer.clear();this.updateAll()};SKULPTCPU.SkulptMesh.prototype.getDisplacements=function(){return this.__displacements};SKULPTCPU.SkulptMesh.prototype.getAffectedVertexInfo=function(a){throw Error("Abstract method not implemented");};SKULPTCPU.SkulptMesh.prototype.update=function(a){throw Error("Abstract method not implemented");};SKULPTCPU.SkulptMesh.prototype.updateAll=function(){throw Error("Abstract method not implemented");};
SKULPTCPU.SkulptTerrainMesh=function(a,b,e){SKULPTCPU.SkulptMesh.call(this,a);this.__size=b;this.__halfSize=b/2;this.__res=e;this.__stepSize=b/e};SKULPTCPU.SkulptTerrainMesh.prototype=Object.create(SKULPTCPU.SkulptMesh.prototype);SKULPTCPU.SkulptTerrainMesh.prototype.constructor=SKULPTCPU.SkulptTerrainMesh;SKULPTCPU.SkulptTerrainMesh.prototype.__calcTerrainVertexId=function(a,b){return Math.floor((b+this.__halfSize)/this.__size*this.__res)*this.__res+Math.floor((a+this.__halfSize)/this.__size*this.__res)};
SKULPTCPU.SkulptTerrainMesh.prototype.getAffectedVertexInfo=function(a,b){this.__worldMatInv.getInverse(this.__mesh.matrixWorld);this.__localPos.copy(a).applyMatrix4(this.__worldMatInv);var e=this.__localPos.x,h=this.__localPos.z,g=[],f,d,c;for(d=-b;d<=b;d+=this.__stepSize)for(c=-b;c<=b;c+=this.__stepSize)if(f=Math.sqrt(d*d+c*c),f<b){var k=this.__calcTerrainVertexId(e+d,h+c);this.__mesh.geometry.vertices[k]&&g.push({id:k,weight:f/b})}return g};
SKULPTCPU.SkulptTerrainMesh.prototype.update=function(a){var b=this.__mesh.geometry,e,h,g;h=0;for(g=a.length;h<g;h++){e=a[h];var f,d,c=0;for(d in this.__layers)this.__layers.hasOwnProperty(d)&&(f=this.__layers[d],c+=f.data[e.id]);this.__displacements[e.id]=c;b.vertices[e.id].y=c}b.verticesNeedUpdate=!0;b.computeFaceNormals();b.computeVertexNormals();b.normalsNeedUpdate=!0};
SKULPTCPU.SkulptTerrainMesh.prototype.updateAll=function(){var a=this.__mesh.geometry,b,e;b=0;for(e=a.vertices.length;b<e;b++){var h,g,f=0;for(g in this.__layers)this.__layers.hasOwnProperty(g)&&(h=this.__layers[g],f+=h.data[b]);this.__displacements[b]=f;a.vertices[b].y=f}a.verticesNeedUpdate=!0;a.computeFaceNormals();a.computeVertexNormals();a.normalsNeedUpdate=!0};SKULPTCPU.SkulptCursor=function(a,b){this.__size=a||1;this.__amount=b||1};SKULPTCPU.SkulptCursor.prototype.getSize=function(){return this.__size};
SKULPTCPU.SkulptCursor.prototype.setSize=function(a){this.__size=a};SKULPTCPU.SkulptCursor.prototype.getAmount=function(){return this.__amount};SKULPTCPU.SkulptCursor.prototype.setAmount=function(a){this.__amount=a};SKULPTCPU.SkulptCursor.prototype.show=function(){throw Error("Abstract method not implemented");};SKULPTCPU.SkulptCursor.prototype.hide=function(){throw Error("Abstract method not implemented");};
SKULPTCPU.SkulptCursor.prototype.update=function(a,b){throw Error("Abstract method not implemented");};SKULPTCPU.SkulptMeshCursor=function(a,b,e,h){SKULPTCPU.SkulptCursor.call(this,a,b);if(!e)throw Error("scene not specified");this.__scene=e;this.__radiusSegments=h||32;this.__createMesh();this.hide();this.__pos=new THREE.Vector3;this.__matInv=new THREE.Matrix4};SKULPTCPU.SkulptMeshCursor.prototype=Object.create(SKULPTCPU.SkulptCursor.prototype);SKULPTCPU.SkulptMeshCursor.prototype.constructor=SKULPTCPU.SkulptMeshCursor;
SKULPTCPU.SkulptMeshCursor.prototype.__createMesh=function(){this.__cursorGeom=new THREE.CylinderGeometry(0.5,0.5,1,this.__radiusSegments,1,!0);this.__brushGeomVertexCountHalf=this.__cursorGeom.vertices.length/2;var a=new THREE.MeshBasicMaterial({color:"#000000"});a.wireframe=!0;this.__cursorMesh=new THREE.Mesh(this.__cursorGeom,a);this.__cursorMesh.castShadow=!1;this.__cursorMesh.receiveShadow=!1;this.__scene.add(this.__cursorMesh)};
SKULPTCPU.SkulptCursor.prototype.setSize=function(a){this.__size=a;this.__cursorMesh.scale.x=a;this.__cursorMesh.scale.z=a};SKULPTCPU.SkulptCursor.prototype.setAmount=function(a){this.__amount=a;this.__cursorMesh.scale.y=a};SKULPTCPU.SkulptMeshCursor.prototype.show=function(){this.__cursorMesh.visible=!0};SKULPTCPU.SkulptMeshCursor.prototype.hide=function(){this.__cursorMesh.visible=!1};
SKULPTCPU.SkulptMeshCursor.prototype.update=function(a,b){this.__pos.copy(a);this.__scene instanceof THREE.Object3D&&this.__pos.applyMatrix4(this.__matInv.getInverse(this.__scene.matrixWorld));this.__cursorMesh.position.copy(this.__pos);this.__cursorMesh.rotation.copy(b.__mesh.rotation);var e=this.__cursorMesh.matrixWorld,h=(new THREE.Matrix4).getInverse(e),g=b.__mesh.matrixWorld,f=(new THREE.Matrix4).getInverse(g),e=(new THREE.Matrix4).multiplyMatrices(f,e),h=(new THREE.Matrix4).multiplyMatrices(h,
g),g=b.getDisplacements(),d,f=0;for(d=this.__cursorGeom.vertices.length;f<d;f++){var c=this.__cursorGeom.vertices[f];c.applyMatrix4(e);var k=b.__calcTerrainVertexId(c.x,c.z);c.y=g[k];c.applyMatrix4(h)}for(f=0;f<this.__brushGeomVertexCountHalf;f++)this.__cursorGeom.vertices[f].y=this.__cursorGeom.vertices[f+this.__brushGeomVertexCountHalf].y+1;this.__cursorGeom.verticesNeedUpdate=!0};SKULPTCPU.SkulptProfile=function(){};
SKULPTCPU.SkulptProfile.prototype.getValue=function(a){throw Error("Abstract method not implemented");};SKULPTCPU.CosineSkulptProfile=function(){SKULPTCPU.SkulptProfile.call(this);this.__halfPi=Math.PI/2};SKULPTCPU.CosineSkulptProfile.prototype=Object.create(SKULPTCPU.SkulptProfile.prototype);SKULPTCPU.CosineSkulptProfile.prototype.constructor=SKULPTCPU.CosineSkulptProfile;SKULPTCPU.CosineSkulptProfile.prototype.getValue=function(a){return Math.cos(a*this.__halfPi)};
SKULPTCPU.ConstantSkulptProfile=function(){SKULPTCPU.SkulptProfile.call(this)};SKULPTCPU.ConstantSkulptProfile.prototype=Object.create(SKULPTCPU.SkulptProfile.prototype);SKULPTCPU.ConstantSkulptProfile.prototype.constructor=SKULPTCPU.ConstantSkulptProfile;SKULPTCPU.ConstantSkulptProfile.prototype.getValue=function(a){return 1};SKULPTCPU.SkulptBrush=function(a,b,e){this.__cursor=new SKULPTCPU.SkulptMeshCursor(a,b,e)};
SKULPTCPU.SkulptBrush.prototype.sculpt=function(a,b,e){throw Error("Abstract method not implemented");};SKULPTCPU.SkulptBrush.prototype.getSize=function(a){return this.__cursor.getSize()};SKULPTCPU.SkulptBrush.prototype.setSize=function(a){this.__cursor.setSize(a)};SKULPTCPU.SkulptBrush.prototype.getAmount=function(a){return this.__cursor.getAmount()};SKULPTCPU.SkulptBrush.prototype.setAmount=function(a){this.__cursor.setAmount(a)};SKULPTCPU.SkulptBrush.prototype.showCursor=function(){this.__cursor.show()};
SKULPTCPU.SkulptBrush.prototype.hideCursor=function(){this.__cursor.hide()};SKULPTCPU.SkulptBrush.prototype.updateCursor=function(a,b){this.__cursor.update(a,b)};SKULPTCPU.SkulptAddBrush=function(a,b,e){SKULPTCPU.SkulptBrush.call(this,a,b,e)};SKULPTCPU.SkulptAddBrush.prototype=Object.create(SKULPTCPU.SkulptBrush.prototype);SKULPTCPU.SkulptAddBrush.prototype.constructor=SKULPTCPU.SkulptAddBrush;
SKULPTCPU.SkulptAddBrush.prototype.sculpt=function(a,b,e){var h=a.getCurrLayer(),g=this.getSize()/2,f=this.getAmount(),d=a.getDisplacements();b=a.getAffectedVertexInfo(b,g);var c,k,l;c=0;for(k=b.length;c<k;c++)g=b[c],b[c].oldDisplacement=d[g.id],l=f*e.getValue(g.weight),h.data[g.id]+=l,b[c].newDisplacement=b[c].oldDisplacement+l;a.update(b);return b};SKULPTCPU.SkulptRemoveBrush=function(a,b,e){SKULPTCPU.SkulptBrush.call(this,a,b,e)};SKULPTCPU.SkulptRemoveBrush.prototype=Object.create(SKULPTCPU.SkulptBrush.prototype);
SKULPTCPU.SkulptRemoveBrush.prototype.constructor=SKULPTCPU.SkulptRemoveBrush;SKULPTCPU.SkulptRemoveBrush.prototype.sculpt=function(a,b,e){var h=a.getCurrLayer(),g=this.getSize()/2,f=this.getAmount(),d=a.getDisplacements();b=a.getAffectedVertexInfo(b,g);var c,k,l,m;k=0;for(l=b.length;k<l;k++)c=b[k],b[k].oldDisplacement=d[c.id],g=d[c.id]-h.data[c.id],m=-(f*e.getValue(c.weight)),h.data[c.id]+=m,0>h.data[c.id]+g&&(h.data[c.id]=-g),b[k].newDisplacement=b[k].oldDisplacement+m;a.update(b);return b};
SKULPTCPU.SkulptFlattenBrush=function(a,b,e){SKULPTCPU.SkulptBrush.call(this,a,b,e)};SKULPTCPU.SkulptFlattenBrush.prototype=Object.create(SKULPTCPU.SkulptBrush.prototype);SKULPTCPU.SkulptFlattenBrush.prototype.constructor=SKULPTCPU.SkulptFlattenBrush;
SKULPTCPU.SkulptFlattenBrush.prototype.sculpt=function(a,b,e){var h=a.getCurrLayer(),g=this.getSize()/2;b=a.getAffectedVertexInfo(b,g);var g=a.getDisplacements(),f=0,d,c,k;c=0;for(k=b.length;c<k;c++)d=b[c],f+=g[d.id];var f=f/b.length,l,m,n,p;c=0;for(k=b.length;c<k;c++)d=b[c],l=e.getValue(d.weight),m=g[d.id],b[c].oldDisplacement=g[d.id],n=m-h.data[d.id],p=h.data[d.id],h.data[d.id]=l*f+(1-l)*m,h.data[d.id]-=n,b[c].newDisplacement=b[c].oldDisplacement+(h.data[d.id]-p);a.update(b);return b};
SKULPTCPU.Skulpt=function(a){if(!a)throw Error("scene not specified");this.__scene=a;this.__meshes={};this.__currMesh=void 0;this.__brushes={add:new SKULPTCPU.SkulptAddBrush(1,1,a),remove:new SKULPTCPU.SkulptRemoveBrush(1,1,a),flatten:new SKULPTCPU.SkulptFlattenBrush(1,1,a)};this.__currBrush=this.__brushes[Object.keys(this.__brushes)[0]];this.__currProfile=new SKULPTCPU.CosineSkulptProfile};
SKULPTCPU.Skulpt.prototype.addMesh=function(a,b){if(!(a instanceof SKULPTCPU.SkulptMesh))throw Error("skulptMesh must be of type SKULPTCPU.SkulptMesh");if(-1!==Object.keys(this.__meshes).indexOf(b))throw Error("SKULPTCPU.Skulpt mesh name already exists: "+b);this.__currMesh=this.__meshes[b]=a};SKULPTCPU.Skulpt.prototype.getMesh=function(a){if(-1===Object.keys(this.__meshes).indexOf(a))throw Error("SKULPTCPU.Skulpt mesh name does not exist: "+a);return this.__meshes[a]};
SKULPTCPU.Skulpt.prototype.removeMesh=function(a){if(-1===Object.keys(this.__meshes).indexOf(a))throw Error("SKULPTCPU.Skulpt mesh name does not exist: "+a);delete this.__meshes[a]};SKULPTCPU.Skulpt.prototype.setBrush=function(a){if(-1===Object.keys(this.__brushes).indexOf(a))throw Error("Brush name not recognised: "+a);this.__currBrush=this.__brushes[a]};SKULPTCPU.Skulpt.prototype.getBrushSize=function(){return this.__currBrush.getSize()};
SKULPTCPU.Skulpt.prototype.setBrushSize=function(a){for(var b in this.__brushes)this.__brushes.hasOwnProperty(b)&&this.__brushes[b].setSize(a)};SKULPTCPU.Skulpt.prototype.getBrushAmount=function(){return this.__currBrush.getAmount()};SKULPTCPU.Skulpt.prototype.setBrushAmount=function(a){for(var b in this.__brushes)this.__brushes.hasOwnProperty(b)&&this.__brushes[b].setAmount(a)};SKULPTCPU.Skulpt.prototype.updateCursor=function(a,b){this.__currBrush.updateCursor(a,b)};
SKULPTCPU.Skulpt.prototype.showCursor=function(){this.__currBrush.showCursor()};SKULPTCPU.Skulpt.prototype.hideCursor=function(){this.__currBrush.hideCursor()};SKULPTCPU.Skulpt.prototype.sculpt=function(a){return this.__currBrush.sculpt(this.__currMesh,a,this.__currProfile)};
