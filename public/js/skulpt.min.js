var SKULPT=SKULPT||{version:"1.0.2"};console.log("Using SKULPT "+SKULPT.version);
SKULPT.GpuSkulpt=function(a){if("undefined"===typeof a.mesh)throw Error("mesh not specified");this.__mesh=a.mesh;if("undefined"===typeof a.renderer)throw Error("renderer not specified");this.__renderer=a.renderer;if("undefined"===typeof a.size)throw Error("size not specified");this.__size=a.size;this.__halfSize=this.__size/2;if("undefined"===typeof a.res)throw Error("res not specified");this.__res=a.res;this.__proxyRes=a.proxyRes||this.__res;this.__actualToProxyRatio=this.__res/this.__proxyRes;this.__gridSize=
this.__size/this.__res;this.__texelSize=1/this.__res;this.__imageProcessedData=new Float32Array(4*this.__res*this.__res);this.__isSculpting=!1;this.__sculptUvPos=new THREE.Vector2;this.__cursorHoverColor=new THREE.Vector3(0.4,0.4,0.4);this.__cursorAddColor=new THREE.Vector3(0.3,0.5,0.1);this.__cursorRemoveColor=new THREE.Vector3(0.5,0.2,0.1);this.__shouldClear=!1;this.__linearFloatRgbParams={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,wrapS:THREE.ClampToEdgeWrapping,wrapT:THREE.ClampToEdgeWrapping,
format:THREE.RGBFormat,stencilBuffer:!1,depthBuffer:!1,type:THREE.FloatType};this.__nearestFloatRgbParams={minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,wrapS:THREE.ClampToEdgeWrapping,wrapT:THREE.ClampToEdgeWrapping,format:THREE.RGBFormat,stencilBuffer:!1,depthBuffer:!1,type:THREE.FloatType};this.__nearestFloatRgbaParams={minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,wrapS:THREE.ClampToEdgeWrapping,wrapT:THREE.ClampToEdgeWrapping,format:THREE.RGBAFormat,stencilBuffer:!1,
depthBuffer:!1,type:THREE.FloatType};this.__pixelByteData=new Uint8Array(4*this.__res*this.__res);this.__proxyPixelByteData=new Uint8Array(4*this.__proxyRes*this.__proxyRes);this.__callbacks={};this.__init()};
SKULPT.GpuSkulpt.prototype.__shaders={vert:{passUv:"varying vec2 vUv;\nvoid main() {\nvUv = vec2(uv.x, uv.y);\ngl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}",heightMap:["uniform sampler2D uTexture;\nuniform vec2 uTexelSize;\nuniform vec2 uTexelWorldSize;\nuniform float uHeightMultiplier;\nvarying vec3 vViewPos;\nvarying vec3 vViewNormal;\nvarying vec2 vUv;",THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {\nvUv = uv;\nvec4 t = texture2D(uTexture, vUv) * uHeightMultiplier;\nvec3 displacedPos = vec3(position.x, t.r, position.z);\nvec2 du = vec2(uTexelSize.r, 0.0);\nvec2 dv = vec2(0.0, uTexelSize.g);\nvec3 vecPosU = vec3(displacedPos.x + uTexelWorldSize.r,\ntexture2D(uTexture, vUv + du).r * uHeightMultiplier,\ndisplacedPos.z) - displacedPos;\nvec3 vecNegU = vec3(displacedPos.x - uTexelWorldSize.r,\ntexture2D(uTexture, vUv - du).r * uHeightMultiplier,\ndisplacedPos.z) - displacedPos;\nvec3 vecPosV = vec3(displacedPos.x,\ntexture2D(uTexture, vUv + dv).r * uHeightMultiplier,\ndisplacedPos.z - uTexelWorldSize.g) - displacedPos;\nvec3 vecNegV = vec3(displacedPos.x,\ntexture2D(uTexture, vUv - dv).r * uHeightMultiplier,\ndisplacedPos.z + uTexelWorldSize.g) - displacedPos;\nvViewNormal = normalize(normalMatrix * 0.25 * (cross(vecPosU, vecPosV) + cross(vecPosV, vecNegU) + cross(vecNegU, vecNegV) + cross(vecNegV, vecPosU)));\nvec4 worldPosition = modelMatrix * vec4(displacedPos, 1.0);\nvec4 viewPos = modelViewMatrix * vec4(displacedPos, 1.0);\nvViewPos = viewPos.rgb;\ngl_Position = projectionMatrix * viewPos;",
THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n")},frag:{skulpt:"uniform sampler2D uBaseTexture;\nuniform sampler2D uSculptTexture1;\nuniform vec2 uTexelSize;\nuniform int uIsSculpting;\nuniform int uSculptType;\nuniform float uSculptAmount;\nuniform float uSculptRadius;\nuniform vec2 uSculptPos;\nvarying vec2 vUv;\nfloat add(vec2 uv) {\nfloat len = length(uv - vec2(uSculptPos.x, 1.0 - uSculptPos.y));\nreturn uSculptAmount * smoothstep(uSculptRadius, 0.0, len);\n}\nvoid main() {\nvec4 tBase = texture2D(uBaseTexture, vUv);\nvec4 t1 = texture2D(uSculptTexture1, vUv);\nif (uIsSculpting == 1) {\nif (uSculptType == 1) {\nt1.r += add(vUv);\n} else if (uSculptType == 2) {\nt1.r -= add(vUv);\nt1.r = max(0.0, tBase.r + t1.r) - tBase.r;\n}\n}\ngl_FragColor = t1;\n}",
combineTextures:"uniform sampler2D uTexture1;\nuniform sampler2D uTexture2;\nvarying vec2 vUv;\nvoid main() {\ngl_FragColor = texture2D(uTexture1, vUv) + texture2D(uTexture2, vUv);\n}",setColor:"uniform vec4 uColor;\nvoid main() {\ngl_FragColor = uColor;\n}",scaleAndFlipV:"uniform sampler2D uTexture;\nuniform float uScale;\nvarying vec2 vUv;\nvoid main() {\nvec2 scaledAndFlippedUv = vec2(vUv.x * uScale, 1.0 - (vUv.y * uScale));\ngl_FragColor = texture2D(uTexture, scaledAndFlippedUv);\n}",encodeFloat:"uniform sampler2D uTexture;\nuniform vec4 uChannelMask;\nvarying vec2 vUv;\nfloat shift_right(float v, float amt) {\nv = floor(v) + 0.5;\nreturn floor(v / exp2(amt));\n}\nfloat shift_left(float v, float amt) {\nreturn floor(v * exp2(amt) + 0.5);\n}\nfloat mask_last(float v, float bits) {\nreturn mod(v, shift_left(1.0, bits));\n}\nfloat extract_bits(float num, float from, float to) {\nfrom = floor(from + 0.5);\nto = floor(to + 0.5);\nreturn mask_last(shift_right(num, from), to - from);\n}\nvec4 encode_float(float val) {\nif (val == 0.0) {\nreturn vec4(0, 0, 0, 0);\n}\nfloat sign = val > 0.0 ? 0.0 : 1.0;\nval = abs(val);\nfloat exponent = floor(log2(val));\nfloat biased_exponent = exponent + 127.0;\nfloat fraction = ((val / exp2(exponent)) - 1.0) * 8388608.0;\nfloat t = biased_exponent / 2.0;\nfloat last_bit_of_biased_exponent = fract(t) * 2.0;\nfloat remaining_bits_of_biased_exponent = floor(t);\nfloat byte4 = extract_bits(fraction, 0.0, 8.0) / 255.0;\nfloat byte3 = extract_bits(fraction, 8.0, 16.0) / 255.0;\nfloat byte2 = (last_bit_of_biased_exponent * 128.0 + extract_bits(fraction, 16.0, 23.0)) / 255.0;\nfloat byte1 = (sign * 128.0 + remaining_bits_of_biased_exponent) / 255.0;\nreturn vec4(byte4, byte3, byte2, byte1);\n}\nvoid main() {\nvec4 t = texture2D(uTexture, vUv);\ngl_FragColor = encode_float(dot(t, uChannelMask));\n}",
lambertCursor:["uniform vec3 uBaseColor;\nuniform vec3 uAmbientLightColor;\nuniform float uAmbientLightIntensity;\nuniform int uShowCursor;\nuniform vec2 uCursorPos;\nuniform float uCursorRadius;\nuniform vec3 uCursorColor;\nvarying vec3 vViewPos;\nvarying vec3 vViewNormal;\nvarying vec2 vUv;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif",THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\nvec3 ambient = uAmbientLightColor * uAmbientLightIntensity;\nvec3 diffuse = vec3(0.0);\n#if MAX_DIR_LIGHTS > 0\nfor (int i = 0; i < MAX_DIR_LIGHTS; i++) {\nvec4 lightVector = viewMatrix * vec4(directionalLightDirection[i], 0.0);\nfloat normalModulator = dot(normalize(vViewNormal), normalize(lightVector.xyz));\ndiffuse += normalModulator * directionalLightColor[i];\n}\n#endif\nvec3 finalColor = uBaseColor * (ambient + diffuse);\nif (uShowCursor == 1) {\nfloat len = length(vUv - vec2(uCursorPos.x, 1.0 - uCursorPos.y));\nfinalColor = mix(finalColor, uCursorColor, smoothstep(uCursorRadius, 0.0, len));\n}\ngl_FragColor = vec4(finalColor, 1.0);",
THREE.ShaderChunk.shadowmap_fragment,"}"].join("\n")}};SKULPT.GpuSkulpt.prototype.getCursorHoverColor=function(a,b,c){return this.__cursorHoverColor};SKULPT.GpuSkulpt.prototype.setCursorHoverColor=function(a,b,c){this.__cursorHoverColor.copy(a,b,c)};SKULPT.GpuSkulpt.prototype.getCursorAddColor=function(a,b,c){return this.__cursorAddColor};SKULPT.GpuSkulpt.prototype.setCursorAddColor=function(a,b,c){this.__cursorAddColor.copy(a,b,c)};SKULPT.GpuSkulpt.prototype.getCursorRemoveColor=function(a,b,c){return this.__cursorRemoveColor};
SKULPT.GpuSkulpt.prototype.setCursorRemoveColor=function(a,b,c){this.__cursorRemoveColor.copy(a,b,c)};
SKULPT.GpuSkulpt.prototype.__init=function(){this.__checkExtensions();this.__setupRttScene();this.__clearMaterial=new THREE.ShaderMaterial({uniforms:{uColor:{type:"v4",value:new THREE.Vector4}},vertexShader:this.__shaders.vert.passUv,fragmentShader:this.__shaders.frag.setColor});this.__setupRttRenderTargets();this.__setupShaders();this.__setupVtf();this.__supportsTextureFloatLinear?(this.__imageDataTexture=new THREE.DataTexture(null,this.__res,this.__res,THREE.RGBAFormat,THREE.FloatType,void 0,THREE.ClampToEdgeWrapping,
THREE.ClampToEdgeWrapping,THREE.LinearFilter,THREE.LinearMipMapLinearFilter),this.__imageDataTexture.generateMipmaps=!0):(this.__imageDataTexture=new THREE.DataTexture(null,this.__res,this.__res,THREE.RGBAFormat,THREE.FloatType,void 0,THREE.ClampToEdgeWrapping,THREE.ClampToEdgeWrapping,THREE.NearestFilter,THREE.NearestFilter),this.__imageDataTexture.generateMipmaps=!1)};
SKULPT.GpuSkulpt.prototype.__checkExtensions=function(a){a=this.__renderer.context;if(!a.getExtension("OES_texture_float"))throw a="No support for floating point textures. Extension not available: OES_texture_float",alert(a),Error(a);this.__supportsTextureFloatLinear=null!==a.getExtension("OES_texture_float_linear");console.log("Texture float linear filtering support: "+this.__supportsTextureFloatLinear);if(!a.getParameter(a.MAX_VERTEX_TEXTURE_IMAGE_UNITS))throw a="Vertex textures not supported on your graphics card",
alert(a),Error(a);};
SKULPT.GpuSkulpt.prototype.__setupShaders=function(){this.__skulptMaterial=new THREE.ShaderMaterial({uniforms:{uBaseTexture:{type:"t",value:null},uSculptTexture1:{type:"t",value:null},uTexelSize:{type:"v2",value:new THREE.Vector2(this.__texelSize,this.__texelSize)},uTexelWorldSize:{type:"v2",value:new THREE.Vector2(this.__size/this.__res,this.__size/this.__res)},uIsSculpting:{type:"i",value:0},uSculptType:{type:"i",value:0},uSculptPos:{type:"v2",value:new THREE.Vector2},uSculptAmount:{type:"f",value:0.05},
uSculptRadius:{type:"f",value:0}},vertexShader:this.__shaders.vert.passUv,fragmentShader:this.__shaders.frag.skulpt});this.__combineTexturesMaterial=new THREE.ShaderMaterial({uniforms:{uTexture1:{type:"t",value:null},uTexture2:{type:"t",value:null}},vertexShader:this.__shaders.vert.passUv,fragmentShader:this.__shaders.frag.combineTextures});this.__rttEncodeFloatMaterial=new THREE.ShaderMaterial({uniforms:{uTexture:{type:"t",value:null},uChannelMask:{type:"v4",value:new THREE.Vector4}},vertexShader:this.__shaders.vert.passUv,
fragmentShader:this.__shaders.frag.encodeFloat});this.__rttProxyMaterial=new THREE.ShaderMaterial({uniforms:{uTexture:{type:"t",value:null},uScale:{type:"f",value:0}},vertexShader:this.__shaders.vert.passUv,fragmentShader:this.__shaders.frag.scaleAndFlipV});this.__channelVectors={r:new THREE.Vector4(1,0,0,0),g:new THREE.Vector4(0,1,0,0),b:new THREE.Vector4(0,0,1,0),a:new THREE.Vector4(0,0,0,1)}};
SKULPT.GpuSkulpt.prototype.__setupRttScene=function(){this.__rttScene=new THREE.Scene;this.__rttCamera=new THREE.OrthographicCamera(-this.__halfSize,this.__halfSize,this.__halfSize,-this.__halfSize,-1E4,1E4);this.__rttQuadGeom=new THREE.PlaneGeometry(this.__size,this.__size);this.__rttQuadMesh=new THREE.Mesh(this.__rttQuadGeom,this.__skulptMaterial);this.__rttScene.add(this.__rttQuadMesh)};
SKULPT.GpuSkulpt.prototype.__setupRttRenderTargets=function(){this.__rttRenderTarget1=this.__supportsTextureFloatLinear?new THREE.WebGLRenderTarget(this.__res,this.__res,this.__linearFloatRgbParams):new THREE.WebGLRenderTarget(this.__res,this.__res,this.__nearestFloatRgbParams);this.__rttRenderTarget1.generateMipmaps=!1;this.__clearRenderTarget(this.__rttRenderTarget1,0,0,0,0);this.__rttRenderTarget2=this.__rttRenderTarget1.clone();this.__clearRenderTarget(this.__rttRenderTarget2,0,0,0,0);this.__rttCombinedLayer=
this.__rttRenderTarget1.clone();this.__clearRenderTarget(this.__rttCombinedLayer,0,0,0,0);this.__rttProxyRenderTarget=this.__supportsTextureFloatLinear?new THREE.WebGLRenderTarget(this.__proxyRes,this.__proxyRes,this.__linearFloatRgbParams):new THREE.WebGLRenderTarget(this.__proxyRes,this.__proxyRes,this.__nearestFloatRgbParams);this.__rttProxyRenderTarget.generateMipmaps=!1;this.__clearRenderTarget(this.__rttProxyRenderTarget,0,0,0,0);this.__rttFloatEncoderRenderTarget=new THREE.WebGLRenderTarget(this.__res,
this.__res,this.__nearestFloatRgbaParams);this.__rttFloatEncoderRenderTarget.generateMipmaps=!1;this.__clearRenderTarget(this.__rttFloatEncoderRenderTarget,0,0,0,0)};SKULPT.GpuSkulpt.prototype.__clearRenderTarget=function(a,b,c,f,d){this.__rttQuadMesh.material=this.__clearMaterial;this.__clearMaterial.uniforms.uColor.value.set(b,c,f,d);this.__renderer.render(this.__rttScene,this.__rttCamera,a,!1)};
SKULPT.GpuSkulpt.prototype.__setupVtf=function(){this.__mesh.material=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{uTexture:{type:"t",value:null},uTexelSize:{type:"v2",value:new THREE.Vector2(1/this.__res,1/this.__res)},uTexelWorldSize:{type:"v2",value:new THREE.Vector2(this.__gridSize,this.__gridSize)},uHeightMultiplier:{type:"f",value:1},uBaseColor:{type:"v3",value:new THREE.Vector3(0.6,0.8,0)},uShowCursor:{type:"i",value:0},
uCursorPos:{type:"v2",value:new THREE.Vector2},uCursorRadius:{type:"f",value:0},uCursorColor:{type:"v3",value:new THREE.Vector3}}]),vertexShader:this.__shaders.vert.heightMap,fragmentShader:this.__shaders.frag.lambertCursor,lights:!0})};
SKULPT.GpuSkulpt.prototype.update=function(a){this.__shouldClear&&(this.__rttQuadMesh.material=this.__clearMaterial,this.__clearMaterial.uniforms.uColor.value.set(0,0,0,0),this.__renderer.render(this.__rttScene,this.__rttCamera,this.__rttRenderTarget1,!1),this.__renderer.render(this.__rttScene,this.__rttCamera,this.__rttRenderTarget2,!1),this.__shouldClear=!1,this.__updateCombinedLayers=!0);this.__isSculpting&&(this.__rttQuadMesh.material=this.__skulptMaterial,this.__skulptMaterial.uniforms.uBaseTexture.value=
this.__imageDataTexture,this.__skulptMaterial.uniforms.uSculptTexture1.value=this.__rttRenderTarget2,this.__skulptMaterial.uniforms.uIsSculpting.value=this.__isSculpting,this.__skulptMaterial.uniforms.uSculptPos.value.copy(this.__sculptUvPos),this.__renderer.render(this.__rttScene,this.__rttCamera,this.__rttRenderTarget1,!1),this.__swapRenderTargets(),this.__isSculpting=!1,this.__updateCombinedLayers=!0);if(this.__updateCombinedLayers&&(this.__rttQuadMesh.material=this.__combineTexturesMaterial,this.__combineTexturesMaterial.uniforms.uTexture1.value=
this.__imageDataTexture,this.__combineTexturesMaterial.uniforms.uTexture2.value=this.__rttRenderTarget2,this.__renderer.render(this.__rttScene,this.__rttCamera,this.__rttCombinedLayer,!1),this.__updateCombinedLayers=!1,this.__mesh.material.uniforms.uTexture.value=this.__rttCombinedLayer,this.__callbacks.hasOwnProperty("update"))){a=this.__callbacks.update;var b,c;b=0;for(c=a.length;b<c;b++)a[b]()}};
SKULPT.GpuSkulpt.prototype.__swapRenderTargets=function(){var a=this.__rttRenderTarget1;this.__rttRenderTarget1=this.__rttRenderTarget2;this.__rttRenderTarget2=a};SKULPT.GpuSkulpt.prototype.setBrushSize=function(a){a/=2*this.__size;this.__skulptMaterial.uniforms.uSculptRadius.value=a;this.__mesh.material.uniforms.uCursorRadius.value=a};SKULPT.GpuSkulpt.prototype.setBrushAmount=function(a){this.__skulptMaterial.uniforms.uSculptAmount.value=a};
SKULPT.GpuSkulpt.prototype.loadFromImageData=function(a,b,c){var f,d=99999,e,g;e=0;for(g=this.__imageProcessedData.length;e<g;e++)f=c?Math.abs(a[e]/255-0.5):a[e]/255,this.__imageProcessedData[e]=f*b,this.__imageProcessedData[e]<d&&(d=this.__imageProcessedData[e]);e=0;for(g=this.__imageProcessedData.length;e<g;e++)this.__imageProcessedData[e]-=d;this.__imageDataTexture.image.data=this.__imageProcessedData;this.__imageDataTexture.needsUpdate=!0;this.__skulptMaterial.uniforms.uBaseTexture.value=this.__imageDataTexture;
this.__combineTexturesMaterial.uniforms.uTexture1.value=this.__imageDataTexture;this.__updateCombinedLayers=!0};SKULPT.GpuSkulpt.prototype.sculpt=function(a,b,c){this.__skulptMaterial.uniforms.uSculptType.value=a;this.__isSculpting=!0;this.__sculptUvPos.x=(b.x+this.__halfSize)/this.__size;this.__sculptUvPos.y=(b.z+this.__halfSize)/this.__size;1===a?this.__mesh.material.uniforms.uCursorColor.value.copy(this.__cursorAddColor):2===a&&this.__mesh.material.uniforms.uCursorColor.value.copy(this.__cursorRemoveColor)};
SKULPT.GpuSkulpt.prototype.clear=function(){this.__shouldClear=!0};SKULPT.GpuSkulpt.prototype.updateCursor=function(a){this.__sculptUvPos.x=(a.x+this.__halfSize)/this.__size;this.__sculptUvPos.y=(a.z+this.__halfSize)/this.__size;this.__mesh.material.uniforms.uCursorPos.value.set(this.__sculptUvPos.x,this.__sculptUvPos.y);this.__mesh.material.uniforms.uCursorColor.value.copy(this.__cursorHoverColor)};SKULPT.GpuSkulpt.prototype.showCursor=function(){this.__mesh.material.uniforms.uShowCursor.value=1};
SKULPT.GpuSkulpt.prototype.hideCursor=function(){this.__mesh.material.uniforms.uShowCursor.value=0};SKULPT.GpuSkulpt.prototype.getSculptDisplayTexture=function(){return this.__rttCombinedLayer};SKULPT.GpuSkulpt.prototype.__getPixelByteDataForRenderTarget=function(a,b,c,f){var d=this.__renderer.getContext();d.bindFramebuffer(d.FRAMEBUFFER,a.__webglFramebuffer);d.readPixels(0,0,c,f,d.RGBA,d.UNSIGNED_BYTE,b);d.bindFramebuffer(d.FRAMEBUFFER,null)};
SKULPT.GpuSkulpt.prototype.__getPixelEncodedByteData=function(a,b,c,f,d){this.__rttQuadMesh.material=this.__rttEncodeFloatMaterial;this.__rttEncodeFloatMaterial.uniforms.uTexture.value=a;this.__rttEncodeFloatMaterial.uniforms.uChannelMask.value.copy(this.__channelVectors[c]);this.__renderer.render(this.__rttScene,this.__rttCamera,this.__rttFloatEncoderRenderTarget,!1);this.__getPixelByteDataForRenderTarget(this.__rttFloatEncoderRenderTarget,b,f,d)};
SKULPT.GpuSkulpt.prototype.getPixelFloatData=function(){this.__getPixelEncodedByteData(this.__rttCombinedLayer,this.__pixelByteData,"r",this.__res,this.__res);return new Float32Array(this.__pixelByteData.buffer)};
SKULPT.GpuSkulpt.prototype.getProxyPixelFloatData=function(){this.__rttQuadMesh.material=this.__rttProxyMaterial;this.__rttProxyMaterial.uniforms.uTexture.value=this.__rttCombinedLayer;this.__rttProxyMaterial.uniforms.uScale.value=this.__actualToProxyRatio;this.__renderer.render(this.__rttScene,this.__rttCamera,this.__rttProxyRenderTarget,!1);this.__getPixelEncodedByteData(this.__rttProxyRenderTarget,this.__proxyPixelByteData,"r",this.__proxyRes,this.__proxyRes);return new Float32Array(this.__proxyPixelByteData.buffer)};
SKULPT.GpuSkulpt.prototype.addCallback=function(a,b){this.__callbacks.hasOwnProperty(a)||(this.__callbacks[a]=[]);if(b)if("function"===typeof b)this.__callbacks[a].push(b);else throw Error("Specified callbackFn is not a function");else throw Error("Callback function not defined");};SKULPT.ADD=1;SKULPT.REMOVE=2;
